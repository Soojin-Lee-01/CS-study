1. 디자인 패턴
- 프로그램을 설계할 때 발생했던 문제점들을 객체 간의 상호 관계 등을 이용하여 해결할 수 있도록 하나의 
규약 형태로 만들어 놓은 것

1-1. 싱글톤 패턴 (singleton pattern)
- 하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴 -> 해당 인스턴스를 다른 모듈들이 공유하는 형태
1) 장점
- 인스턴스 생성할 때 드는 비용이 줄어듬
- 사용하기 쉬움
2) 단점
- 의존성이 높아짐
- Test Driven Developer (TTD)를 할 때 걸림돌이 됨
  -> 단위 테스트를 할 때, 테스트가 서로 독립적이어야 하며 어떤 순서로든 실행할 수 있어야 함
  -> but, 하나의 인스턴스를 공유하고 있기 때문에 독립적이기 어려움

<의존성 주입 (디커플링)>
- 싱글톤 패턴의 단점 (의존성)을 조금 느슨하게 만들어 줄 수 있는 것
- 기존 싱글톤 패턴 -> 메인 모듈이 직접 다른 하위 모듈에 대한 의존성을 줌
- 의존성 주입 -> 의존성 주입자가 이 부분을 가로채 메인 모듈이 간접적으로 의존성을 주입
 --> 메인 모듈은 하위 모듈에 대한 의존성이 떨어짐 (디커플링)
1) 장점
- 테스팅하기 쉽고 마이그레이션(소프트웨어를 한 시스템에서 다른 시스템으로 이동하는 것) 하기도 수월
- 애플리케이션 방향이 일관되고 쉽게 추론 가능
- 모듈 간에 관계들이 조금 더 명확
2) 단점
- 복잡성이 늘어날 수 있음 -> 모듈들을 분리하기 때문에 클래스 수가 늘어남
!! 의존성 주입 원칙
- 상위 모듈은 하위 모듈에서 어떠한 것도 가져오지 않아야 함
- 상위 모듈, 하위 모듈 둘다 추상화에 의존해야하며, 추상화는 세부사항에 의존해서는 안됨
