1. 비선형 자료구조 🐮
- 자료 순서나 관계가 복잡한 구조

1-1. 그래프
- 간선(edge)과 정점(vertex)으로 이루어진 자료구조
- 단방향 간선 : 한 쪽 방향으로만 가는 일반통행
- 양방향 간선 : 양 쪽 방향으로 모두 가는 것
- outdegree : 한 정점 기준으로 나가는 간선
- indegree : 한 정점 기준으로 들어오는 간선
- 가중치 : 간선과 정점 사이에 드는 비용
-> 정점 + 간선의 집합 = 그래프

1-2. 트리
- 정점과 간선으로 이루어진 계층적 데이터의 집합
- 각각 부모 자식 관계를 가짐
-> 숲 : 트리들이 모여진 집합
- 간선 수 = 노드 수 - 1 (E = V - 1)
  1) 루트 노드
    - 가장 최상위 노드를 뜻하며 가장 위에 있는 노드
  2) 내부 노드
    - 루트 노드와 외부 노드 사이에 있는 노드
  3) 리프 노드
    - 자식 노드가 없는 노드를 뜻하며 가장 밖에 있는 노드를 뜻함

  <1> 깊이
    - 깊이는 루트 노드부터 그 대상 노드까지 최단 거리를 말함
  <2> 높이
    - 트리에서 가장 긴 거리를 뜻함
  <3> 서브트리
    - 트리 내의 하위 집합을 말함. 즉, 트리 안에 부분 집합을 뜻함
  
  (1) 이진 트리
    - 이진 트리는 자식의 노드 수가 두개 이하인 트리를 의미
    1> 정 이진 트리 (Full Binary Tree) : 자식 노드가 0 또는 2개인 이진 트리를 의미. 아예 없거나 꽉 차 있는 형태를 말함
    2> 완전 이진 트리 (Complete Binary Tree) : 왼쪽에서부터 채워져 있는 이진 트리를 의미. 마지막 레벨을 제외하고는 모든 레벨이 완전히 채워져 있으며, 마지막 레벨의 경우 왼쪽부터 채워져 있음
    3> 변질 이진 트리 (Degenerate Binary Tree) : 자식 노드가 하나밖에 없는 이진 트리를 의미.
    4> 포화 이진 트리 (Perfect Binary Tree) : 모든 노드가 꽉 차있는 이진 트리를 의미
    5> 균형 이진 트리 (Balanced Binary Tree) : 왼쪽과 오른쪽 노드의 높이 차이가 1 이하인 이진 트리를 의미. map, set을 구성하는 레드 블랙 트리는 균형 이진 트리 중 하나

  (2) 이진 탐색 트리
    - 노드의 오른쪽 하위 트리에는 노드 값보다 큰 값이 있는 노드만 포함되고, 왼쪽 하위 트리에는 노드 값보다 작은 값이 들어있는 트리
    -> 장점 : 검색이 매우 쉬워짐, O(logn) 시간으로 처리 가능
    -> 단점 : 최악의 경우는 선형적이 될 수 있음, O(n) 시간이 걸림

  (3) AVL 트리
    - 이진 탐색 트리의 단점을 보완하기 위한 트리. 즉, 최악의 경우 선형적인 트리가 되는 것을 방지하고 스스로 균형을 잡는 이진 탐색 트리
    - 두 자식 서브트리의 높이를 최대 1만큼 둔다는 특징 존재
    -> 삽입, 삭제, 탐색 등 모두 O(logn) 유지 - 트리의 일부를 왼쪽 혹은 오른쪽으로 회전하여 균형을 맞춤

  (4) 레드 블랙 트리
    - 균형 이진 탐색 트리로 O(logn) 시간복잡도
    - 모든 리프 노드아 루트 노드는 블랙, 어떤 노드가 레드이면 그 자식은 반드시 블랙 (균형)

1-3. 힙
  - 완전 이진 트리 기반의 자료 구조이며, 최소힙과 최대힙 두 가지 존재
    1) 최대힙
      - 루트 노드에 있는 키는 모든 자식에 있는 키 중에서 가장 커야함. 각 노드의 자식 노드와의 관계에도 이와 같은 특징이 재귀적으로 이루어져야 함.
    2) 최소힙
      - 최소 힙에서 루트 노드에 있는 키는 모든 자식에 있는 키 중에서 최솟값이어야 함. 각 노드의 자식 노드와의 관계도 이와 같은 특징이 재귀적으로 이루어져야 함.


1-4. 우선순위 큐
  - 데이터에 우선순위가 존재하고 이 순서대로 제공되는 자료구조. 우선 순위가 높으면 이를 먼저 제공하는 형태. 힙 기반으로 구현
  - 큰 값이 높은 우선순위를 가질지, 작은 값이 높은 우선순위를 가질지 정할 수 있음.

1-5. 맵
  - 특정 순서에 따라 키와 매핑된 값의 조합으로 형성된 자료구조.
  - key 값에 어떤 값을 매칭시킨다던지 할때 맵을 사용
    -> key : value 형식으로 값 저장

1-6. 셋
  - 배열처럼 특정 순서에 따라 고유한 요소를 저장하는 컨테이너. 하지만 가장 큰 차별점은 중복되는 요소가 없다는 것.
  - 같은 요소를 set에 넣으면 하나만 저장

1-7. 해시 테이블
  - Map에서 순서가 없는 방식으로 구현되며 해시 값을 통해 매핑을 진행하는 자료구조.
  - 삽입 -> Map과 똑같이 key, value로 값을 삽입. / 삭제, 탐색 -> 설정해준 key 값을 통해 탐색하고 삭제.
  - 시간복잡도 O(1)



